<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mac on Barry Blog</title><link>https://barryoo.github.io/blog/mac/</link><description>Recent content in Mac on Barry Blog</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><copyright>Copyright © 2023, Barry Chen.</copyright><lastBuildDate>Tue, 30 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://barryoo.github.io/blog/mac/index.xml" rel="self" type="application/rss+xml"/><item><title>MacOS输入法切换最佳实践</title><link>https://barryoo.github.io/macos%E8%BE%93%E5%85%A5%E6%B3%95%E5%88%87%E6%8D%A2%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate><guid>https://barryoo.github.io/macos%E8%BE%93%E5%85%A5%E6%B3%95%E5%88%87%E6%8D%A2%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid><description>快速切换中英文输入法 写代码时, 经常要在中英文输入之间切换, 为了提高效率, 就想要实现一键切换输入法.经过尝试, 发现使用Control切换输入法效率最高. 自带的输入法可以通过caps lock切换, 但需要移动左手, 并且该输入法的词库太差. 使用Shift切换, 会导致在使用Shift输入大写字母时,有一定概率导致输入法切换. 而使用Control,不需要移动手,直接使用手掌根部按压即可.
如何实现Control切换输入法. 直接上结论: chrome浏览器在密码框中,会自动修改输入法为系统自带输入法.所以方案3是最完美的方案.
方案1 安装软件`ishud``. 可以指定 left control/ left option/ left command/right control/right option/right command 一键切换. 同时还可以在屏幕中间显示当前的输入法.
该方案简单,而且几乎完美.唯一的问题是,有些键盘对mac的兼容性不太好, 导致在两个不同键盘间切换时, 切换输入法的按键会变动.
另外, 该软件已经多年没有更新.
方案2 使用一些键位定制工具,如karabiner. 该方案太重, 如果没有其他更换键位的需求, 不建议该方案.
方案3 搜狗输入法支持使用Control切换中英文.所以需要删除MacOS自带的输入法,仅保留搜狗输入法.
在~/Library/Preferences/com.apple.HIToolbox.plist文件中AppleEnabledInputSources, 删除KeyboardLayout Name U.S.
看似简单, 然而操作中会遇到以下问题.
由于plist文件不是纯文本的, 所以不能直接用文本编辑器打开, 需要转换. 打开terminal软件, 执行命令plutil -convert xml1 ~/Library/Preferences/com.apple.HIToolbox.plist MacOS会自动检测该文件,如果被修改, 则会自动还原. 所以需要使用文件锁点功能, 文件-&amp;gt;右键-&amp;gt;查看简介-&amp;gt;锁定文件. 具体操作如下: 执行上面的shell命令,立即锁定文件. 使用文本剪辑器打开文件, 修改, 先不保存. 解锁文件,立即保存文件,再立即锁定. 重新打开文件, 查看文件内容, 确认文件是否被修改成功.</description></item><item><title>投屏相关技术</title><link>https://barryoo.github.io/%E6%8A%95%E5%B1%8F%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF/</link><pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate><guid>https://barryoo.github.io/%E6%8A%95%E5%B1%8F%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF/</guid><description>DLNA DLNA: 基于有线网络或者无线网络, 支持IPv4/v6, 只能使用http协议. DLNA基于本质上是把播放地址传给其他设备, 所以只能播放多媒体资源. 只需要软件实现, 不需要硬件支持. 有版权的视频,需要视频软件自己实现, 为了避免视频盗版, 投屏时,会生成授权. 看墙外的视频,会有障碍.
miracast 基于WiFi Direct的显示镜像技术. 且只能基于WIFI, 不支持有线网络, 设备间直连, 不需要接入WIFI局域网, 不需要路由器. 可以对UI层管理, 并非所有的UI层都会传输. android原生自带miracast, 但是android10之后原生不再自带miracast, 换成了chromecast. 在不同的设备中, 你会看到不同的命名: 如Wlan display、Wifi display、Miracast、Allshare cast、Mirroring screen、无线显示 台式主机想要使用miracast, 必须使用支持miracast的无线网卡.
Chromecast chromecast是google开发的类似miracast的镜像显示技术. 可以把手机或电脑的浏览器标签页镜像到电视. 电视接收端需要专有硬件支持. google推出了chromecast电视棒, NVIDIA 与google合作推出了nvidia shield tv, SONY电视内置了chromecast. 其他也有三方软件模拟chromecast, 但不是合法的.
airplay Apple独有协议. 支持从IOS或Mac投屏到appleTV, 但是不支持IOS投屏到Mac. 2021年6月, apple升级airplay, 支持IOS投屏到Mac
airplay支持类似DLNA的媒体传输, 也支持类似miracast的镜像. 甚至支持多屏协作, 可以把其他设备作为第二显示器. 例如macbook可以把ipad作为第二显示器.
airplay由apply严格管理, 哪些设备可以在什么场景下投向哪些设备, 而不是像其他投屏协议, 定义好客户端与接收端, 就可以任意投屏. 例如mac可以投屏到ipad, 但是ios不可以.
三方软件airserver, 逆向airPlay协议, 实现了airplay接收端. 只需要在mac上安装接收端软件, iphone/ipad就可以投屏到mac, iphone/ipad不需要安装额外的软件.</description></item></channel></rss>