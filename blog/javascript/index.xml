<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>javascript on Barry Blog</title><link>https://barryoo.github.io/blog/javascript/</link><description>Recent content in javascript on Barry Blog</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><copyright>Copyright © 2023, Barry Chen.</copyright><lastBuildDate>Sun, 19 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://barryoo.github.io/blog/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>async与await</title><link>https://barryoo.github.io/async%E4%B8%8Eawait/</link><pubDate>Sun, 19 Jun 2022 00:00:00 +0000</pubDate><guid>https://barryoo.github.io/async%E4%B8%8Eawait/</guid><description>async/await是一种新的语法，用同步的编程方式替换原有的回调函数和协程的用法.
.net中的async await async async 用于修饰方法, 方法的返回值必须是 void或者Task&amp;lt;T&amp;gt;. async的目的是:使方法内的await关键字生效。
await await 仅可用于由 async 关键字修饰的异步方法中。如果没有async会报错. await修饰的方法, 返回值必须是Task. 如果要对普通调用使用await, 可以使用Task.Run(()=&amp;gt;{ method() })把方法包装成一个返回值为Task的匿名函数.
代码执行到await 标记的异步方法时, 主方法立即return, 之后的代码被阻塞,一直到异步方法完成,才会执行. 所以await, 相当于为本方法中 await之后的所有代码添加一个异步回调的任务.
async修饰的方法, 被调用时,
不加await, 异步方法是异步执行, 异步方法后面的代码在当前线程中同步执行. 加await, 异步方法是同步执行. 总结 异步可以提高响应能力。 异步不会阻塞线程 使用 async 来标记异步方法 使用 await 来指定暂停点，挂起其进度，在等待的异步过程完成后才能继续通过该点。同时，会将控制权返回至异步方法的调用方，调用方可以继续执行不依赖于异步返回结果的其它工作。 如果使用了 Async 最好一直使用它 异步方法避免使用 Task.Wait 和 Task.Result ，因为他们会导致死锁。
javascript中的async await async async 函数返回的是一个 Promise 对象. await 只能出现在 async 函数中 如果在函数中 return 一个直接量，async 会把这个直接量通过 Promise.resolve() 封装成 Promise 对象。 如果 async 函数没有返回值， 它会返回 Promise.</description></item></channel></rss>