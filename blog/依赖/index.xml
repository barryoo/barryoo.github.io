<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>依赖 on Barry Blog</title><link>https://barryoo.github.io/blog/%E4%BE%9D%E8%B5%96/</link><description>Recent content in 依赖 on Barry Blog</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><copyright>Copyright © 2023, Barry Chen.</copyright><lastBuildDate>Sat, 06 Jun 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://barryoo.github.io/blog/%E4%BE%9D%E8%B5%96/index.xml" rel="self" type="application/rss+xml"/><item><title>Java多项目依赖管理</title><link>https://barryoo.github.io/java%E5%A4%9A%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/</link><pubDate>Sat, 06 Jun 2020 00:00:00 +0000</pubDate><guid>https://barryoo.github.io/java%E5%A4%9A%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/</guid><description>maven依赖继承与聚合 见官方文档
spring的依赖管理 以spring-cloud为例进行说明
spring-cloud-dependencies Hoxton.SR6 定义spring-cloud中各个组件的版本. 组件的版本各不一致. 用于规定各组件之间的版本兼容性.
组件内 组件以及组件的子模块的版本完全统一, 有任何改动都会导致整个组件的版本递增. 也会定义组件的外部依赖的版本号, 对其统一管理.
我使用的依赖管理 与spring的依赖管理类似, 也有不同之处.
每个组件的外部依赖版本, 不是在组件内定义, 而是由base-pom统一定义. 这样做的好处是,由于组件之间存在依赖,且组件的外部依赖可能冲突,为了避免冲突,外部依赖的版本统一管理.
版本升级策略 版本号 大版本.小版本.修复版本 大版本:当组件出现重大迭代,会增加大版本号. 小版本:当组件新增feature,会增加小版本号. 修复版本:当修复缺陷,会增加修复版本号.
升级策略
定义新的开发版本, 如1.23.45-SNAPSHOT. 版本应用到组件内所有模块, 并提交代码. 修改代码,并提交代码. 代码通过测试,可以发布时, 修改版本为release. 如1.23.45. 版本应用到组件内所有模块. 并提交代码. 发布组件 定义新的开发版本, 如1.23.46-SNAPSHOT 或 1.24.0-SNAPSHOT 题外:微服务中monoRepo与multiRepo如何选择. monorepo: 单一代码库,所有项目都在这一个代码库中. multiRepo: 多代码库, 每个项目一个代码库.
首先明确一点,无论团队大小, 既然是微服务, 那肯定会为每个服务指定负责人, 而不会交错负责.
multiRepo优点:
每个人只需要关注自己负责的服务的代码. 小团队,可以避免团队内有人随意修改他人负责的代码. 大团队,只开负责的代码仓库的权限. IDEA 中只打开自己负责的代码, 搜索代码什么的都很方便. CI/CD 方便 版本管理方便, 减少代码冲突. multiRepo缺点:
需要搭建 maven 私仓, 对所有的公共技术模块进行严格的版本管理, 在 base-pom 中对版本进行统一管理.</description></item></channel></rss>